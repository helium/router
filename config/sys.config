[
    {libp2p, [
        {use_dns_for_seeds, true},
        {seed_dns_cname, "seed.helium.io"},
        {max_tcp_connections, 500000}
    ]},
    {blockchain, [
        {base_dir, "/var/data"},
        {update_dir, "update"},
        {port, 2154},
        {seed_nodes,
            "/ip4/18.217.27.26/tcp/2154,/ip4/35.161.222.43/tcp/443,/ip4/99.80.158.114/tcp/2154"},
        {snap_source_base_url, "https://snapshots.helium.wtf/mainnet"},
        {fetch_latest_from_snap_source, true},
        {honor_quick_sync, true},
        {quick_sync_mode, blessed_snapshot},
        {blessed_snapshot_block_height, 1118161},
        {blessed_snapshot_block_hash,
            <<127, 204, 161, 67, 65, 97, 118, 98, 168, 208, 165, 210, 45, 123, 135, 53, 213, 17,
                178, 88, 166, 124, 83, 82, 145, 99, 78, 135, 242, 204, 121, 102>>},
        {disable_gateway_cache, true},
        {sync_timeout_mins, 1},
        {max_inbound_connections, 12},
        {outbound_gossip_connections, 4},
        {sc_packet_handler, router_device_routing},
        {sc_max_actors, 1100}
    ]},
    {router, [
        {max_v8_context, 1000},
        {oui, 1},
        {sc_open_dc_amount, 100000000},
        {sc_expiration_interval, 25},
        {sc_expiration_buffer, 15},
        {router_console_api, [
            {endpoint, <<"https://console.helium.com">>},
            {ws_endpoint, <<"wss://console.helium.com/socket/router/websocket">>},
            {downlink_endpoint, <<"https://console.helium.com">>},
            {secret, <<>>}
        ]},
        {device_queue_size_limit, 20}
    ]},
    {grpcbox, [
        {servers, [
            #{
                grpc_opts => #{
                    service_protos => [router_pb, state_channel_pb],
                    services => #{
                        'helium.router' => helium_router_service,
                        'helium.state_channel' => blockchain_grpc_sc_server_handler
                    }
                },
                transport_opts => #{ssl => false},
                listen_opts => #{
                    port => 8080,
                    ip => {0, 0, 0, 0}
                },
                pool_opts => #{size => 500},
                server_opts => #{
                    header_table_size => 4096,
                    enable_push => 1,
                    max_concurrent_streams => unlimited,
                    initial_window_size => 65535,
                    max_frame_size => 16384,
                    max_header_list_size => unlimited
                }
            }
        ]}
    ]},
    {prometheus, [
        {collectors, [
            prometheus_boolean,
            prometheus_counter,
            prometheus_gauge,
            prometheus_histogram,
            prometheus_vm_memory_collector,
            prometheus_vm_system_info_collector
        ]},
        {vm_system_info_collector_metrics, [process_count]}
    ]},
    {lager, [
        {suppress_supervisor_start_stop, true},
        {log_root, "/var/data/log"},
        {crash_log, "crash.log"},
        {handlers, [
            {lager_file_backend, [
                {file, "router.log"},
                {level, warning},
                {size, 0},
                {date, "$D0"},
                {count, 7},
                {formatter_config, [
                    "[",
                    date,
                    " ",
                    time,
                    "] ",
                    pid,
                    " [",
                    severity,
                    "]",
                    {device_id, [" [", device_id, "]"], ""},
                    " [",
                    {module, ""},
                    {function, [":", function], ""},
                    {line, [":", line], ""},
                    "] ",
                    message,
                    "\n"
                ]}
            ]}
        ]},
        {traces, [
            {{lager_file_backend, "router.log"}, [{application, router}], info},
            {{lager_file_backend, "router.log"}, [{module, router_console_api}], info},
            {{lager_file_backend, "router.log"}, [{module, router_device_routing}], info},
            {{lager_file_backend, "state_channel.log"}, [{module, router_sc_worker}], info},
            {{lager_file_backend, "state_channel.log"},
                [{module, blockchain_state_channels_db_owner}], info},
            {{lager_file_backend, "state_channel.log"}, [{module, blockchain_state_channels_cache}],
                info},
            {{lager_file_backend, "state_channel.log"},
                [{module, blockchain_state_channels_server}], info},
            {{lager_file_backend, "state_channel.log"},
                [{module, blockchain_state_channels_worker}], info},
            {{lager_file_backend, "blockchain.log"}, [{module, blockchain_txn}], debug}
        ]}
    ]}
].
